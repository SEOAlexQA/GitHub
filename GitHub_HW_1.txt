GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.
         зарегестрировлся на сайте https://github.com
         создал репозиторий JSON 
 
 5. Клонировать репозиторий JSON на локальный компьютер.
         git clone https://github.com/SEOAlexQA /JSON.git
 
 6. Внутри локального JSON создать файл “new.json”.
          cd JSON
          touch new.json
 
 7. Добавить файл под гит.
          git add new.json  
 
 8. Закоммитить файл.
          git commit -m "created new.json" new.json
 
 9. Отправить файл на внешний GitHub репозиторий.
          git push
 
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
          nano new.json         
 		  {
 		     "ФИО":"Seo Alex" ,
 		     "Возраст": 48,
		     "Количество домашних животных": 0,
		     "Зарплата со старта": 600
		}         
               
 11. Отправить изменения на внешний репозиторий.
          git add new.json
          git commit -m "added text" new.json
          git push
 
 12. Создать файл preferences.json
          touch preferences.json
 
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
   nano preferences.json
 		{
		"Любимый фильм":"Механик",
		"Любимый сериал":"You",
		"Любимая еда":"Плов",
		"Любимое время года":"Лето",
		"Сторона которую хотели бы посетить":"Перу"
		}
 
 14. Создать файл skills.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
                cat > skills.json
 {
	"Базовая теория":"Изучено",
	"Клиент-серверная архитектура.":"Изучено",
	"HTTP Методы запросов на сервер.":"В процессе",
	"Коды ответов HTTP сервера.":"В процессе",
	"Структуры HTTP запросов и ответов.":"В процессе",
	"JSON, XML. Их структура.":"Пока нет",
	"Тестирование API через Postman (JS, автотесты API).":"Пока нет",
	"Снятие и чтение логов c внешнего сервера.":"Пока нет",
	"Снифинг http web трафика через Charles и Fiddler.":"В процессе",
	"Dev Tools веб браузеров (Google Chrome, FireFox).":"Пока нет",
	"VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)":"Пока нет",
	"Мобильное тестирование.":"Пока нет",
	"Особенность iOS, Android, гайдлайны.":"Пока нет",
	"Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)":"Пока нет",
	"Сборка Android приложений на Android Studio.":"Пока нет",
	"ADB (управление андройд девайсами).":"Пока нет",
	"Настройка прокси и vpn на iOS и Android.":"Пока нет",
	"Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.":"В процессе",
	"Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)":"Изучено",
	"Основы bash скриптинг, автоматизация рутинных задач на сервере.":"Пока нет",
	"Доступ к удалённым серверам.":"Пока нет",
	"Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).":"Пока нет",
	"База данных Postgres (установка, настройка и использование).":"Пока нет",
	"Нереляционная база данных Redis (установка, настройка и использование).":"Пока нет",
	"Нагрузочное тестирование в Jmeter.":"Пока нет",
	"Методология разработки Scrum.":"Пока нет",
	"Python. (Изучение основ. Создание клиент серверного приложения)":"В процессе"
}

 15. Отправить сразу 2 файла на внешний репозиторий.
              git add .
              git commit -m "preferences and skills"
              git push 
 
 16. На веб интерфейсе создать файл bug_report.json.
        Add file
        Create new file
        Name bug_report.json 
 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
        справа нажал зеленую кнопку "Commit changes" 
        ввел коммит и нажал кнопку commit
 
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
        нажал сначала на файл bag_report.json
        потом на edit this file
        добавил баг репорт 
{
      "ID":"Номер", 
      "Summary": "Проверка",
      "Expected result": "Ожидаемый результат"
}

 
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
        справа нажал зеленую кнопку "Commit changes" 
        ввел коммит и нажал кнопку commit 
 
 20. Синхронизировать внешний и локальный репозиторий JSON
         git fetch
         git pull
______________________________________________________________________________________________________

XML
 21. Создать внешний репозиторий c названием XML.
           залогинился на сайте https://github.com
           создал репозиторий XML 
 
 22. Клонировать репозиторий XML на локальный компьютер.
           git clone https://github.com/SEOAlexQA/XML.git
 
 23. Внутри локального XML создать файл “new.xml”.
           cd XML
           touch new.xml 
 
 24. Добавить файл под гит.
           git add new.xml
 
 25. Закоммитить файл.
           git commit -m "create new.xml" new.xml
 
 26. Отправить файл на внешний GitHub репозиторий.
           git push
 
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
           nano new.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
		<article lang="">
		  <para>ФИО: Seo Alex&#13;</para>
 		 <para>Возраст: 48&#13;</para>
 		 <para>Количество домашних животных: 0&#13;</para>
		  <para>Зарплата со старта: 600&#13;</para>
  		<para>&#13;</para>
 		 <para>&#13;</para>
		</article>     
 
 28. Отправить изменения на внешний репозиторий.
           git add new.xml
           git commit -m "added text" new.xml
           git push
           
 29. Создать файл preferences.xml
           touch preferences.xml
 
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
           nano preferences.xml
 		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
		<article lang="">
		  <para>Любимый фильм: Механик&#13;</para>
		  <para>Любимый сериал: You&#13;</para>
		  <para>Любимая еда: Плов&#13;</para>
		  <para>Любимое время года: Лето&#13;</para>
		  <para>Сторона которую хотели бы посетить: Перу</para>
		</article>
 
 31. Создать файл skills.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
	cat > skills.xml 
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
		<article lang="">
		<para>Базовая теория&#13;</para>
		<para>Клиент-серверная архитектура.&#13;</para>
		<para>HTTP Методы запросов на сервер.&#13;</para>
		<para>Коды ответов HTTP сервера.&#13;</para>
		<para>Структуры HTTP запросов и ответов.&#13;</para>
		<para>JSON, XML. Их структура.&#13;</para>
		<para>Тестирование API через Postman (JS, автотесты API).&#13;</para>
		<para>Снятие и чтение логов c внешнего сервера.&#13;</para>
		<para>Снифинг http web трафика через Charles и Fiddler.&#13;</para>
		<para>Dev Tools веб браузеров (Google Chrome, FireFox).&#13;</para>
		<para>VPN. (Как работает, зачем нужен, как использовать, варианты инструментов).&#13;</para>
		<para>Мобильное тестирование.&#13;</para>
		<para>Особенность iOS, Android, гайдлайны.&#13;</para>
		<para>Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят).&#13;</para>
		<para>Сборка Android приложений на Android Studio.&#13;</para>
		<para>ADB (управление андройд девайсами).&#13;</para>
		<para>Настройка прокси и vpn на iOS и Android.&#13;</para>
		<para>Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.&#13;</para>
		<para>Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса).&#13;</para>
		<para>Основы bash скриптинг, автоматизация рутинных задач на сервере.&#13;</para>
		<para>Доступ к удалённым серверам.&#13;</para>
		<para>Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).&#13;</para>
		<para>База данных Postgres (установка, настройка и использование).&#13;</para>
		<para>Нереляционная база данных Redis (установка, настройка и использование).&#13;</para>
		<para>Нагрузочное тестирование в Jmeter.&#13;</para>
		<para>Методология разработки Scrum.&#13;</para>
		<para>Python. (Изучение основ. Создание клиент серверного приложения).&#13;</para>
		</article>
 
 32. Сделать коммит в одну строку.
            git add .
            git commit -m "preferences and skills"
              
 33. Отправить сразу 2 файла на внешний репозиторий.
            git push       
       
 34. На веб интерфейсе создать файл bug_report.xml.
        Add file
        Create new file
        Name: bug_report.xml 
 
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
        справа нажал зеленую кнопку "Commit changes" 
        ввел коммит и нажал кнопку commit
 
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
       нажал сначала на файл bag_report.xml
       потом на edit this file
       добавил баг репорт
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
		<article lang="">
		 <para>ID   Enviroment    Title      Severity     Priority    STR      Expected Result        Actual result        Attachment    ФИО Автора   Comments&#13;</para>
		  <para>ID   Окружение    Описание   Серьезность   Приоритет   Шаги   Ожидаемый результат   Полученный результат   Ссылки,скрины&#13;</para>
 		 <para>&#13;</para>
		</article>
 
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
        справа нажал зеленую кнопку "Commit changes" 
        ввел коммит и нажал кнопку commit
 
 38. Синхронизировать внешний и локальный репозиторий XML
            git fetch
            git pull

_______________________________________________________________________________________________________________________________

TXT
 1. Создать внешний репозиторий c названием TXT.
              залогинился на сайте https://github.com
              создал репозиторий TXT 
 
 2. Клонировать репозиторий TXT на локальный компьютер.
              git clone https://github.com/SEOAlexQA/TXT.git
              
 3. Внутри локального TXT создать файл “new.txt”.
              cd TXT 
              touch new.txt
 
 4. Добавить файл под гит.
              git add new.txt
 
 5. Закоммитить файл.
              git commit -m "created new.txt" new.txt
 
 6. Отправить файл на внешний GitHub репозиторий.
              git push 
 
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
  nano new.txt
    	ФИО: Seo Alex 
	Возраст: 48
	Количество домашних животных: 0
З	арплата со старта: 600
  
 8. Отправить изменения на внешний репозиторий.
             git add new.txt
             git commit -m "added text" new.txt
             git push   
 
 9. Создать файл preferences.txt
             touch preferences.txt
 
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
            nano preferences.txt
	Любимый фильм: Механик
	Любимый сериал: You
	Любимая еда: Плов
	Любимое время года: Лето
	Сторона которую хотели бы посетить: Перу
 
 11. Создать файл skills.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
             cat > skills.txt
		Базовая теория
		Клиент-серверная архитектура.
		HTTP Методы запросов на сервер.
		Коды ответов HTTP сервера.
		Структуры HTTP запросов и ответов.
		JSON, XML. Их структура.
		Тестирование API через Postman (JS, автотесты API).
		Снятие и чтение логов c внешнего сервера.
		Снифинг http web трафика через Charles и Fiddler.
		Dev Tools веб браузеров (Google Chrome, FireFox).
		VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
		Мобильное тестирование.
		Особенность iOS, Android, гайдлайны.
		Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)
		Сборка Android приложений на Android Studio.
		ADB (управление андройд девайсами).
		Настройка прокси и vpn на iOS и Android.
		Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
		Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
		Основы bash скриптинг, автоматизация рутинных задач на сервере.
		Доступ к удалённым серверам.
		Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
		База данных Postgres (установка, настройка и использование).
		Нереляционная база данных Redis (установка, настройка и использование).
		Нагрузочное тестирование в Jmeter.
		Методология разработки Scrum.
		Python. (Изучение основ. Создание клиент серверного приложения)
           
 12. Сделать коммит в одну строку.
              git add .
              git commit -m "preferences and skills"
 
 13. Отправить сразу 2 файла на внешний репозиторий.
              git push
 
 14. На веб интерфейсе создать файл bug_report.txt.
      	 Add file
       	 Create new file
      	  Name bug_report.txt
 
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
        справа нажал зеленую кнопку "Commit changes" 
        ввел коммит и нажал кнопку commit
 
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
       нажал сначала на файл bag_report.txt
       потом на edit this file
       добавил баг репорт
	 ID	 Summary		Expected result	  Проверка	 Ожидаемый результат

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
        справа нажал зеленую кнопку "Commit changes" 
        ввел коммит и нажал кнопку commit
 
 18. Синхронизировать внешний и локальный репозиторий TXT
       git fetch
       git pull